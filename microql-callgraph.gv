digraph "MicroQL Call Graph" {
    concentrate=true;
    splines="ortho";
    rankdir="LR";
    
    // Legend
    subgraph legend {
        rank = min;
        label = "MicroQL Function Call Graph";
        Legend [shape=none, margin=0, label = <
            <table cellspacing="0" cellpadding="0" border="1">
                <tr><td>MicroQL Call Graph (Post-Refactor)</td></tr>
                <tr><td>
                    <table cellspacing="0">
                        <tr><td>Entry Points</td><td width="50px" bgcolor='#D0021B'></td></tr>
                        <tr><td>Core Functions</td><td bgcolor='#4A90E2'></td></tr>
                        <tr><td>Compilation Functions</td><td bgcolor='#9013FE'></td></tr>
                        <tr><td>Wrapper Functions</td><td bgcolor='#7ED321'></td></tr>
                        <tr><td>Utility Functions</td><td bgcolor='#F5A623'></td></tr>
                    </table>
                </td></tr>
            </table>
        >];
    }
    
    // Entry Points
    query [label="query()" shape="rect" style="rounded,filled" fillcolor="#D0021B"];
    
    // Core Execution Functions
    compileQuery [label="compileQuery()" shape="rect" style="rounded,filled" fillcolor="#4A90E2"];
    executeAST [label="executeAST()" shape="rect" style="rounded,filled" fillcolor="#4A90E2"];
    
    // Compilation Functions (from compileQuery.js)
    compileQueryNode [label="compileQueryNode()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    compileChainNode [label="compileChainNode()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    compileServiceNode [label="compileServiceNode()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    compileServiceFunction [label="compileServiceFunction()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    transformMethodSyntax [label="transformMethodSyntax()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    separateArguments [label="separateArguments()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    compileFunctionArgument [label="compileFunctionArgument()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    createWrappedFunction [label="createWrappedFunction()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    resolveDependencies [label="resolveDependencies()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    
    // Wrapper Functions  
    withArgs [label="withArgs()" shape="rect" style="rounded,filled" fillcolor="#7ED321"];
    withDebug [label="withDebug()" shape="rect" style="rounded,filled" fillcolor="#7ED321"];
    withTimeout [label="withTimeout()" shape="rect" style="rounded,filled" fillcolor="#7ED321"];
    withRetry [label="withRetry()" shape="rect" style="rounded,filled" fillcolor="#7ED321"];
    withErrorHandling [label="withErrorHandling()" shape="rect" style="rounded,filled" fillcolor="#7ED321"];
    applyWrappers [label="applyWrappers()" shape="rect" style="rounded,filled" fillcolor="#7ED321"];
    
    // Utility Functions
    prepareServices [label="prepareServices()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    callTearDownOnUsedServices [label="callTearDownOnUsedServices()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    transformObjectAsync [label="transformObjectAsync()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    containsReferences [label="containsReferences()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    extractDependencies [label="extractDependencies()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    countAtSymbols [label="countAtSymbols()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    getContext [label="getContext()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    resolveValue [label="resolveValue()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    validateType [label="validateType()" shape="rect" style="rounded,filled" fillcolor="#F5A623"];
    
    // External Dependencies
    retrieve [label="retrieve()" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    utilService [label="utilService" shape="rect" style="rounded,filled" fillcolor="#9013FE"];
    
    // Main Flow (Compile -> Execute)
    query -> prepareServices;
    query -> compileQuery;
    query -> executeAST;
    query -> callTearDownOnUsedServices;
    
    // Compilation Phase
    compileQuery -> compileQueryNode;  // for each query
    compileQuery -> resolveDependencies;  // dependency ordering
    
    compileQueryNode -> compileChainNode;  // for chain queries
    compileQueryNode -> compileServiceNode;  // for service queries
    
    compileChainNode -> compileServiceNode;  // for each step
    
    compileServiceNode -> transformMethodSyntax;  // method syntax transformation
    compileServiceNode -> separateArguments;  // argument classification
    compileServiceNode -> extractDependencies;  // dependency extraction
    compileServiceNode -> createWrappedFunction;  // wrapper application
    
    createWrappedFunction -> withArgs;  // add argument resolution
    createWrappedFunction -> withDebug;  // add debug logging
    createWrappedFunction -> withTimeout;  // add timeout
    createWrappedFunction -> withRetry;  // add retry logic
    createWrappedFunction -> withErrorHandling;  // add error handling
    createWrappedFunction -> applyWrappers;  // compose all wrappers
    
    separateArguments -> compileFunctionArgument;  // for function-type args
    separateArguments -> containsReferences;  // check for @ and $ refs
    
    compileFunctionArgument -> compileServiceFunction;  // for service descriptors
    
    compileServiceFunction -> compileServiceNode;  // recursive compilation
    
    // Execution Phase
    executeAST -> executeQuery;  // internal function (not in graph)
    executeAST -> executeQueryNode;  // internal function (not in graph)
    executeAST -> executeChainNode;  // internal function (not in graph)
    executeAST -> executeServiceNode;  // internal function (not in graph)
    
    // Runtime Resolution
    withArgs -> resolveValue;  // resolve @ and $ references
    withErrorHandling -> compileServiceFunction;  // compile error handlers
    
    resolveValue -> getContext;  // for @ references
    resolveValue -> retrieve;  // for JSONPath access
    resolveValue -> transformObjectAsync;  // for object resolution
    
    getContext -> retrieve;  // for field access
    getContext -> countAtSymbols;  // count @ symbols
    
    extractDependencies -> containsReferences;  // recursively check refs
    transformObjectAsync -> resolveValue;  // recursive resolution
    
    // Group by file
    subgraph cluster_query {
        label="File: query.js (Main Entry)";
        style="filled";
        fillcolor="#f0f0f0";
        
        query;
        prepareServices;
        callTearDownOnUsedServices;
    }
    
    subgraph cluster_compile {
        label="File: compileQuery.js (Compilation)";
        style="filled";
        fillcolor="#e6f3ff";
        
        compileQuery;
        compileQueryNode;
        compileChainNode;
        compileServiceNode;
        compileServiceFunction;
        transformMethodSyntax;
        separateArguments;
        compileFunctionArgument;
        createWrappedFunction;
        resolveDependencies;
        withArgs;
        withDebug;
        withTimeout;
        withRetry;
        withErrorHandling;
        applyWrappers;
        transformObjectAsync;
        containsReferences;
        extractDependencies;
        countAtSymbols;
        getContext;
        resolveValue;
    }
    
    subgraph cluster_execute {
        label="File: execute.js (Execution)";
        style="filled";
        fillcolor="#fff2e6";
        
        executeAST;
    }
    
    subgraph cluster_util {
        label="File: util.js (Utility Service)";
        style="filled";
        fillcolor="#f0f8f0";
        
        utilService;
        validateType;
    }
    
    subgraph cluster_retrieve {
        label="File: retrieve.js (JSONPath)";
        style="filled";
        fillcolor="#fff0ff";
        
        retrieve;
    }
}